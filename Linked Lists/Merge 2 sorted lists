/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 * 
 * typedef struct ListNode listnode;
 * 
 * listnode* listnode_new(int val) {
 *     listnode* node = (listnode *) malloc(sizeof(listnode));
 *     node->val = val;
 *     node->next = NULL;
 *     return node;
 * }
 */
/**
 * @input A : Head pointer of linked list 
 * @input B : Head pointer of linked list 
 * 
 * @Output head pointer of list.
 */
listnode* mergeTwoLists(listnode* head1, listnode* head2) {
    if(head1==NULL) return head2;
    if(head2==NULL) return head1;
    listnode* newLL = (listnode*)malloc(sizeof(listnode));
    listnode* temp1 = head1;
    listnode* temp2 = head2;
    listnode* temp3 = newLL;
    while(temp1!=NULL&&temp2!=NULL){
            listnode* newNode = (listnode*)malloc(sizeof(listnode));
        if(temp1->val<=temp2->val){
            newNode->val = temp1->val;
            newNode->next = NULL;
            temp1 = temp1->next;
        }
        else if(temp1->val>temp2->val){
 
            newNode->val = temp2->val;
            newNode->next = NULL;
            //temp3->next = newNode;
            //temp3 = newNode;
            temp2 = temp2->next;
        }

        temp3->next = newNode;
        temp3 = newNode;
    }
    while(temp1!=NULL){
            listnode* newNode = (listnode*)malloc(sizeof(listnode));
            newNode->val = temp1->val;
            newNode->next = NULL;
            temp3->next = newNode;
            temp3 = newNode;
            temp1 = temp1->next;
    }
    while(temp2!=NULL){
        listnode* newNode = (listnode*)malloc(sizeof(listnode));
            newNode->val = temp2->val;
            newNode->next = NULL;
            temp3->next = newNode;
            temp3 = newNode;
            temp2 = temp2->next;
    }
    return newLL->next;
}
